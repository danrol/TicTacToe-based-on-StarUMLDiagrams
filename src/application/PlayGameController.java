/*
 * This code has been generated by the Rebel: a code generator for modern Java.
 * 
 * For more details, please visit www.archetypesoftware.com.
 *
 * Drop us a line or two at feedback@archetypesoftware.com. We would love to hear from you.
 */
package application;

import java.util.Scanner;

import application.Constants.*;
import boundaries.ChooseYourRowPositionForm;
import boundaries.ChooseYourColumnPositionForm;
import boundaries.DecideToStartOrToQuitForm;
import boundaries.GameBoardDisplay;
import boundaries.IllegalMoveMessage;
import boundaries.NotYourTurnMessage;
import boundaries.PlayerCheckForm;
import boundaries.PlayerOneMoveMessage;
import boundaries.PlayerTwoMoveMessage;
import boundaries.QuitMessage;
import boundaries.RestartGameForm;
import boundaries.ResultsMessage;

public class PlayGameController {
	private int currentPlayer = 2;
	private BoardData boardData = new BoardData();
	private Scanner sc = new Scanner(System.in);

	public PlayGameController() {
		DecideToStartOrToQuitForm decideForm = new DecideToStartOrToQuitForm();
		int decisionResult = decideForm.choose(sc);
		if (decisionResult == Constants.START_CODE)
			playGame();
		else if (decisionResult == Constants.QUIT_CODE)
			quitGame();
	}

	public void playGame() {
		int row, col, currentPlayerAccordingToBoard, playerTryingToMove;
		int restartGame;
		boolean notYourTurn;
		boolean legalMove;
		boolean newGame = true;
		Scanner player_input_scanner = new Scanner(System.in);
		IllegalMoveMessage illegalMessage = new IllegalMoveMessage();
		PlayerCheckForm playerCheckForm = new PlayerCheckForm();
		RestartGameForm restartForm = new RestartGameForm();
		ChooseYourRowPositionForm chooseX = new ChooseYourRowPositionForm();
		ChooseYourColumnPositionForm chooseY = new ChooseYourColumnPositionForm();
		GameBoardDisplay boardDisplay = new GameBoardDisplay();
		PlayerTwoMoveMessage msg2Move = new PlayerTwoMoveMessage();
		PlayerOneMoveMessage msg1Move = new PlayerOneMoveMessage();

		do { // game not over - while
			if(newGame == false)
			{
				restartGame = restartForm.restartCheck(player_input_scanner);
				if (restartGame == Constants.AGREE_TO_RESTART_GAME)
					restartGame();

			}
			boardData.switchPlayer();

			if (boardData.isEmpty() && boardData.getCurrentPlayer() != Constants.PLAYER_TO_START)
				boardData.switchPlayer();

			currentPlayerAccordingToBoard = boardData.getCurrentPlayer();

			if (currentPlayerAccordingToBoard == Constants.FIRST_PLAYER)
				msg1Move.playerOneMoveMessage();
			else if (currentPlayerAccordingToBoard == Constants.SECOND_PLAYER)
				msg2Move.playerTwoMoveMesage();
			do { // notYourTurn - while
				playerTryingToMove = playerCheckForm.check(player_input_scanner);

				if (playerTryingToMove != currentPlayerAccordingToBoard) {
					new NotYourTurnMessage();
					notYourTurn = true;
				} else
					notYourTurn = false;
			} while (notYourTurn);
			do { // while not a legal move
				row = chooseX.choose(currentPlayerAccordingToBoard, player_input_scanner);
				col = chooseY.choose(currentPlayerAccordingToBoard, player_input_scanner);

				if (boardData.isRubricAvailable(row, col)) {
					move(row, col);
					legalMove = true;
				} else {
					illegalMessage.rubrikIsOccupied();
					legalMove = false;
				}
			} while (legalMove == false);

			newGame = false;
			boardDisplay.presentBoard(boardData, boardData.getN());

		} while (!boardData.checkDraw() && !boardData.checkWin(row, col));

		showResults();

	}

	public void move(int x, int y) {
		if (boardData.getCurrentPlayer() == Constants.FIRST_PLAYER)
			boardData.registerMove(x, y, State.X);

		else if (boardData.getCurrentPlayer() == Constants.SECOND_PLAYER)
			boardData.registerMove(x, y, State.O);

	}

	public void showResults() {
		if (boardData.checkDraw()) {
			new ResultsMessage(0);
		} else {
			int winner = boardData.getCurrentPlayer();
			new ResultsMessage(winner);
		}
	}

	public void switchPlayer() {
		if (currentPlayer == Constants.FIRST_PLAYER)
			currentPlayer = Constants.SECOND_PLAYER;
		else if (currentPlayer == Constants.SECOND_PLAYER)
			currentPlayer = Constants.FIRST_PLAYER;
	}

	public void quitGame() {
		sc.close();
		new QuitMessage();
		System.exit(0);
	}

	public void restartGame() {
		boardData.cleanBoard();
	}
}