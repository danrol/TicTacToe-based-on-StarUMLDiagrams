/*
 * This code has been generated by the Rebel: a code generator for modern Java.
 * 
 * For more details, please visit www.archetypesoftware.com.
 *
 * Drop us a line or two at feedback@archetypesoftware.com. We would love to hear from you.
 */
package application;

import application.Constants.*;


public class BoardData {

//	public enum State{Blank, X, O};
	private int n = 3;
	private State[][] cellsState;
	private int moveCount = 0;
	private int currentPlayer = Constants.SECOND_PLAYER;

	public int getN() {
		return n;
	}


	public int getCurrentPlayer() {
		return currentPlayer;
	}

	public void setCurrentPlayer(int currentPlayer) {
		this.currentPlayer = currentPlayer;
	}

	// ----------- << attribute.annotations@AAAAAAFqB6bHtEni1gI= >>
	// ----------- >>
	private int playerTurn;

	// ----------- << attribute.annotations@AAAAAAFqEWBgTiHmyJM= >>
	// ----------- >>
	public BoardData() {
		this.cellsState = new State[n][n];
		this.cleanBoard();
	}

	// ----------- << attribute.annotations@AAAAAAFqEWBgTiHlAa4= >>
	// ----------- >>

	public State[][] getCellsState() {
		return cellsState;
	}

	public int getPlayerTurn() {
		return playerTurn;
	}



	public void setPlayerTurn(int playerTurn) {
		this.playerTurn = playerTurn;
	}

	public boolean isRubricAvailable(int x, int y) {
		if(cellsState[x][y]==State.Blank)
			return true;
		else
			return false;
	}

	
	public boolean checkDraw() {
        if(moveCount == (Math.pow(n, 2) - 1))
            return true;
        else
        	return false;
        
		
	}
	
	public boolean isEmpty() {
		for(int i = 0;i < n;i++) {
			for (int j = 0; j < n;j++){
				if (cellsState[i][j] != State.Blank)
					return false;
			}
		}
		return true;
	}
	public boolean checkWin(int x, int y) {
		if(isEmpty() == true)
			return false;
		
		State cellToCheck = cellsState[x][y];
        for(int i = 0; i < n; i++){
            if(cellsState[x][i] != cellToCheck)
                break;
            if(i == n-1){
                //report win
            	return true;
            }
        }

        //check row
        for(int i = 0; i < n; i++){
            if(cellsState[i][y] != cellToCheck)
                break;
            if(i == n-1){
                //report win
            	return true;
            }
        }

        //check diag
        if(x == y){
            //we're on a diagonal
            for(int i = 0; i < n; i++){
                if(cellsState[i][i] != cellToCheck)
                    break;
                if(i == n-1){
                    //report win
                	return true;
                }
            }
        }
        
      //check anti diag
        if(x + y == n - 1){
            for(int i = 0; i < n; i++){
                if(cellsState[i][(n-1)-i] != cellToCheck)
                    break;
                if(i == n-1){
                    //report win
                	return true;
                }
            }
        }
        return false;
	}

	
	public void registerMove(int row, int col, State state) {
		if(isRubricAvailable(row, col) == true) {
			cellsState[row][col] = state;
			moveCount++;
		}
		else
			//TODO
			System.out.println("Rubrik already occupied please change your move");
	}

	public void cleanBoard() {
		for(int i = 0; i < n;i++) {
			for(int j = 0; j < n;j++) {
				cellsState[i][j] = State.Blank;
			}
		}
	}

	public void switchPlayer() {
		if(currentPlayer == Constants.FIRST_PLAYER)
			currentPlayer = Constants.SECOND_PLAYER;
		else if(currentPlayer == Constants.SECOND_PLAYER)
			currentPlayer = Constants.FIRST_PLAYER; 
		
	}
}