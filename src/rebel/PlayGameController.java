/*
 * This code has been generated by the Rebel: a code generator for modern Java.
 * 
 * For more details, please visit www.archetypesoftware.com.
 *
 * Drop us a line or two at feedback@archetypesoftware.com. We would love to hear from you.
 */
package rebel;

import java.util.*;
import java.time.*;
import rebel.BoardData.State;
import rebel.Constants;


public class PlayGameController {
	private int currentPlayer = 2;
	private BoardData boardData = new BoardData();

	public PlayGameController() {
		playGame();
	}
	
	public void playGame() {
		int x, y, currentPlayerAccordingToBoard, playerTryingToMove;
		int restartGame;
		Scanner sc = new Scanner(System.in); 
		GameBoardDisplay boardDisplay = new GameBoardDisplay();
		PlayerTwoMoveMessage msg2Move = new PlayerTwoMoveMessage();
		PlayerOneMoveMessage msg1Move = new PlayerOneMoveMessage();
		do {
			boardData.switchPlayer();
			currentPlayerAccordingToBoard = boardData.getCurrentPlayer();
			
			if(currentPlayerAccordingToBoard == Constants.FIRST_PLAYER)
				msg1Move.playerOneMoveMessage();
			else if(currentPlayerAccordingToBoard == Constants.SECOND_PLAYER)
				msg2Move.playerTwoMoveMesage();
			
			System.out.println("\nWhat player are you?");
			playerTryingToMove = sc.nextInt();
			if(playerTryingToMove != currentPlayerAccordingToBoard)
				new IllegalMoveMessage();
				
			System.out.println("Choose your x position: "); 
			x = sc.nextInt();
			System.out.println("Choose your y position: ");
			y = sc.nextInt();
			

			if(boardData.isRubricAvailable(x, y))
				move(x,y);
			
			boardDisplay.presentBoard(boardData, boardData.getN());

			
			System.out.println("Do you want to restart the game (0 = no, 1 = yes)?");
			restartGame = sc.nextInt();
			if(restartGame == 1)
				boardData.cleanBoard();
			}
		while (!boardData.checkDraw() && !boardData.checkWin(x,y));
		results();
		sc.close();
	}
	// ----------- << method.annotations@AAAAAAFqBulsxhSBMcE= >>
	// ----------- >>
	public void move(int x, int y) {
		boardData.registerMove(x, y, State.values()[boardData.getCurrentPlayer()]);
	}
	// ----------- << method.annotations@AAAAAAFqB7omw0pLs34= >>
	// ----------- >>
	public void results() {
		ResultsMessage resMes;
		if(boardData.checkDraw()) {
			resMes = new ResultsMessage(0);
		}
		else {
			int winner = boardData.getCurrentPlayer();
			resMes = new ResultsMessage(winner);
		}
	}

	public void switchPlayer() {
		if(currentPlayer == Constants.FIRST_PLAYER)
			currentPlayer = Constants.SECOND_PLAYER;
		else if (currentPlayer == Constants.SECOND_PLAYER)
			currentPlayer = Constants.FIRST_PLAYER;
	}
	public void restartGame() {
		// ----------- << method.body@AAAAAAFqB8hIulAqfTE= >>
		// ----------- >>
	}
	// ----------- << class.extras@AAAAAAFp/VrNYETRfeE= >>
	// ----------- >>
}